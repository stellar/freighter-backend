import { xdr } from "stellar-sdk";

// import { testLogger } from "../test-helper";
import { base64regex } from "../test-helper";
import {
  getLedgerKeyContractCode,
  getLedgerKeyWasmId,
  isTokenSpec,
  parseWasmXdr,
} from ".";

describe("Soroban RPC helpers", () => {
  const CONTRACT_ID =
    "CCWAMYJME4H5CKG7OLXGC2T4M6FL52XCZ3OQOAV6LL3GLA4RO4WH3ASP";
  const ledgerKeyContractData =
    "AAAABgAAAAAAAAABBPvqFiL57/vWE7XeDcrbEXd3WczIDEuhXJhgf2cYn/0AAAAUAAAAAQAAABMAAAAAJ/PWnON+45fjDbkk5muh5BWuW5A2nPtczJfqndGyNNgAAAABAAAAAgAAAA8AAAAITUVUQURBVEEAAAARAAAAAQAAAAMAAAAPAAAAB2RlY2ltYWwAAAAAAwAAAAAAAAAPAAAABG5hbWUAAAAOAAAAClRlc3QgVG9rZW4AAAAAAA8AAAAGc3ltYm9sAAAAAAAOAAAAA1RTVAAAAAAQAAAAAQAAAAEAAAAPAAAABUFkbWluAAAAAAAAEgAAAAAAAAAAjOiEfRh4kaFVQDu/CSTZLMtnyg0DbNowZ/G2nLES3Kw=";
  const contractWasmXdr =
    "";

  describe("getLedgerKeyContractCode", () => {
    it("will return ledger key for contract code", () => {
      const ledgerKeyXdr = getLedgerKeyContractCode(CONTRACT_ID);
      const ledgerKeyFromXdr = xdr.LedgerKey.fromXDR(ledgerKeyXdr, "base64");

      expect(typeof ledgerKeyXdr).toEqual("string");
      expect(base64regex.test(ledgerKeyXdr)).toBeTruthy();
      expect(ledgerKeyFromXdr).toBeInstanceOf(xdr.LedgerKey);
      expect(ledgerKeyFromXdr.switch().name).toEqual("contractData");
    });
    it("will throw when it fails to get ledger key", () => {
      expect(() => getLedgerKeyContractCode("not contract ID")).toThrowError();
    });
  });

  describe("getLedgerKeyWasmId", () => {
    it("will return the contract code ledger key for a contract ID", () => {
      const ledgerKeyWasmId = getLedgerKeyWasmId(ledgerKeyContractData);
      const ledgerKeyFromXdr = xdr.LedgerKey.fromXDR(ledgerKeyWasmId, "base64");

      expect(typeof ledgerKeyWasmId).toEqual("string");
      expect(base64regex.test(ledgerKeyWasmId)).toBeTruthy();
      expect(ledgerKeyFromXdr).toBeInstanceOf(xdr.LedgerKey);
      expect(ledgerKeyFromXdr.switch().name).toEqual("contractCode");
    });

    it("will throw when it fails to get wasm ID xdr", () => {
      expect(() => getLedgerKeyWasmId("not conract data xdr")).toThrowError();
    });
  });

  describe("parseWasmXdr", () => {
    it("will return a json schema of a contract spec", async () => {
      const spec = await parseWasmXdr(contractWasmXdr);
      expect(spec).toHaveProperty("definitions");
    });
  });

  describe("isTokenSpec", () => {
    it("will return a boolean indicating if the spec matches sep41 spec", async () => {
      const spec = await parseWasmXdr(contractWasmXdr);
      const isSep41 = isTokenSpec(spec);

      expect(isSep41).toBeTruthy();
    });

    it("will return false when the spec does match sep41", async () => {
      const isSep41 = isTokenSpec({});

      expect(isSep41).toBeFalsy();
    });
  });
});
