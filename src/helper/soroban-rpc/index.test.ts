import { xdr } from "stellar-sdk";

import { base64regex } from "../test-helper";
import {
  getLedgerKeyContractCode,
  getLedgerKeyWasmId,
  isTokenSpec,
  parseWasmXdr,
} from ".";

describe("Soroban RPC helpers", () => {
  const CONTRACT_ID =
    "CCWAMYJME4H5CKG7OLXGC2T4M6FL52XCZ3OQOAV6LL3GLA4RO4WH3ASP";
  const contractWasmXdr =
    "";

  describe("getLedgerKeyContractCode", () => {
    it("will return ledger key for contract code", () => {
      const ledgerKeyXdr = getLedgerKeyContractCode(CONTRACT_ID, "TESTNET");
      const ledgerKeyFromXdr = xdr.LedgerKey.fromXDR(ledgerKeyXdr, "base64");

      expect(typeof ledgerKeyXdr).toEqual("string");
      expect(base64regex.test(ledgerKeyXdr)).toBeTruthy();
      expect(ledgerKeyFromXdr).toBeInstanceOf(xdr.LedgerKey);
      expect(ledgerKeyFromXdr.switch().name).toEqual("contractData");
    });
    it("will throw when it fails to get ledger key", () => {
      expect(() =>
        getLedgerKeyContractCode("not contract ID", "TESTNET")
      ).toThrowError();
    });
  });

  describe("getLedgerKeyWasmId", () => {
    const EXECTUABLE_XDR = "AAAAAGR7a8CMAj18oYkZKn4kqfBSa8oa0Mdoo294cHR1X2nw";
    const executable = xdr.ContractExecutable.fromXDR(EXECTUABLE_XDR, "base64");
    it("will return the contract code ledger key for a contract ID", () => {
      const ledgerKeyWasmId = getLedgerKeyWasmId(executable, "TESTNET");
      const ledgerKeyFromXdr = xdr.LedgerKey.fromXDR(ledgerKeyWasmId, "base64");

      expect(typeof ledgerKeyWasmId).toEqual("string");
      expect(base64regex.test(ledgerKeyWasmId)).toBeTruthy();
      expect(ledgerKeyFromXdr).toBeInstanceOf(xdr.LedgerKey);
      expect(ledgerKeyFromXdr.switch().name).toEqual("contractCode");
    });
  });

  describe("parseWasmXdr", () => {
    it("will return a json schema of a contract spec", async () => {
      const spec = await parseWasmXdr(contractWasmXdr, "TESTNET");
      expect(spec).toHaveProperty("definitions");
    });
  });

  describe("isTokenSpec", () => {
    it("will return a boolean indicating if the spec matches sep41 spec", async () => {
      const spec = await parseWasmXdr(contractWasmXdr, "TESTNET");
      const isSep41 = isTokenSpec(spec);

      expect(isSep41).toBeTruthy();
    });

    it("will return false when the spec does match sep41", async () => {
      const isSep41 = isTokenSpec({ definitions: {} });

      expect(isSep41).toBeFalsy();
    });
  });
});
